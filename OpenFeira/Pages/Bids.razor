@page "/seller/bids"
@using OpenFeira.Data
@using OpenFeira.Data.Interfaces
@using OpenFeira.Authentication
@using Microsoft.EntityFrameworkCore

@inject ISellerService SellerService
@inject IProductService ProductService
@inject AuthenticationStateProvider AuthStateProvider

<BackofficeLayout Logo="true" BackArrow="true" PreviousText="" PreviousUrl="/seller/main" AuthorizedRoles="Seller">
    <Content>
        <h3>Ofertas Pendentes</h3>
        <ComponentList>
            @foreach (var b in PendingBids.Select((value, i) => (value, i)))
            {
                <ComponentListItem>
                    <SellerBid Id="@b.value.BidId" Photo="@(Images[b.i])" Name="@b.value.BidProductNavigation.ProductName"
                               Amount="@b.value.BidAmount" Price="@b.value.Price" Callback="@update"/>
                </ComponentListItem>
            }
        </ComponentList>

    </Content>
</BackofficeLayout>

@code {
    public String? Buyer { get; set; }
    public List<Bid> PendingBids { get; set; } = new List<Bid>();
    public List<String> Images { get; set; } = new List<string>();

    protected override async Task OnParametersSetAsync()
    {
        Buyer = await ((CustomAuthenticationStateProvider)AuthStateProvider).GetUsername();
        if (Buyer == null) PendingBids = new List<Bid>();
        var bids = await SellerService.GetSellerActiveBids(Buyer);
        if (bids == null) PendingBids = new List<Bid>();
        else
        {
            Images = new List<string>();
            PendingBids = bids;
            foreach (var bid in PendingBids)
            {
                Images.Add((await ProductService.GetProduct(bid.BidProduct)).ProductPhotos.First().ProductPhotoPath);
            }
        }
        StateHasChanged();
    }

    public async Task update()
    {
        var bids = await SellerService.GetSellerActiveBids(Buyer);
        if (bids == null) PendingBids = new List<Bid>();
        else
        {
            Images = new List<string>();
            PendingBids = bids;
            foreach (var bid in PendingBids)
            {
                Images.Add((await ProductService.GetProduct(bid.BidProduct)).ProductPhotos.First().ProductPhotoPath);
            }
            StateHasChanged();
        }
    }

}