@page "/seller/participate/{marketIdString}"
@using BlazorApp1.Data
@using BlazorApp1.Data.Interfaces
@using BlazorApp1.Authentication

@inject ISellerService SellerService
@inject IMarketService MarketService
@inject IProductService ProductService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager

<BackofficeLayout Logo="true" BackArrow="true" PreviousText="" PreviousUrl="/" AuthorizedRoles="Seller">
    <Content>
        <ComponentList>
            @foreach(var item in Products.Select((value, i) => ( value, i )))
            {
                <ComponentListItem>
                    <ProductAvailability Photo="@item.value.ProductPhotos.First().ProductPhotoPath" Availability="@item.value.ProductStock"/>
                    <span class="name">@item.value.ProductName</span>
                    <input class="quantity" type="number" step="1" min="0" max="@item.value.ProductStock" @bind="@Quantities[item.i]"/>
                </ComponentListItem>
            }
        </ComponentList>
        <button class="participate"><i class="fas fa-share-square"></i>  Participar em @MarketName</button>
    </Content>
</BackofficeLayout>

@code {
    public List<int> Quantities { get; set; }
    public List<Product> Products { get; set; }
    public int MarketId { get; set; }
    public string MarketName { get; set; }

    [Parameter]
    public string MarketIdString { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
        string email = authState.User.Identity.Name;


        try
        {
            MarketId = int.Parse(MarketIdString);
            Market m = await MarketService.GetMarket(MarketId);
            MarketName = m.MarketName;

            // If market has already started (or even ended), do not allow
            // the seller to participate
            /*if(m.StartingTime >= DateTime.Now)
                {
                throw new Exception();
            }*/
        }
        catch(Exception)
        {
            NavManager.NavigateTo("/404");
        }


        Seller s = await SellerService.GetSeller("bace@mail.com");
        Products = new List<Product>();
        Quantities = new List<int>();
        foreach(Product p in (List<Product>)s.Products)
        {
            Product p1 = await ProductService.GetProduct(p.ProductId);
            Products.Add(p1);
            Quantities.Add(0);
        }
    }
}