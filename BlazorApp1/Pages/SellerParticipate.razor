@page "/seller/participate/{marketIdString}"
@using BlazorApp1.Data
@using BlazorApp1.Data.Interfaces
@using BlazorApp1.Authentication
@using BlazorApp1.Data.Services
@using Microsoft.DotNet.Scaffolding.Shared.Messaging

@inject ISellerService SellerService
@inject IMarketService MarketService
@inject IProductService ProductService
@inject IStandService StandService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager

<BackofficeLayout Logo="true" BackArrow="true" PreviousText="" PreviousUrl="/seller/main" AuthorizedRoles="Seller">
    <Content>
        @if (Mensagem != null)
        {
            <span class="name">@Mensagem</span>
        }
        <ComponentList>
            @foreach (var item in Products.Select((value, i) => (value, i)))
            {
                <ComponentListItem>
                    <ProductAvailability Photo="@item.value.ProductPhotos.First().ProductPhotoPath" Availability="@item.value.ProductStock"/>
                    <span class="name">@item.value.ProductName</span>
                    <input class="quantity" type="number" step="1" min="0" max="@item.value.ProductStock" @bind="@Quantities[item.i]"/>
                </ComponentListItem>
            }
        </ComponentList>
        <span class="name">Imagem</span>
        <input @bind="@Photo"/>
        <button class="participate" @onclick="@ParticipateInMarket"><i class="fas fa-share-square"></i> Participar em @MarketName</button>
    </Content>
</BackofficeLayout>

@code {
    public List<int> Quantities { get; set; } = new List<int>();
    public List<Product> Products { get; set; } = new List<Product>();
    public int MarketId { get; set; } = 0;
    public string MarketName { get; set; } = "";
    public string? Seller { get; set; } = null;
    public string Photo { get; set; } = "";
    public string? Mensagem { get; set; } = null;

    [Parameter]
    public string MarketIdString { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                MarketId = int.Parse(MarketIdString);
                Market m = await MarketService.GetMarket(MarketId);
                MarketName = m.MarketName;
                if (m.StartingTime <= DateTime.Now)
                    throw new Exception();
            }
            catch (Exception)
            {
                NavManager.NavigateTo("/404");
            }
            Seller = await ((CustomAuthenticationStateProvider)AuthStateProvider).GetUsername();
            Products = new List<Product>();
            Quantities = new List<int>();
            if (Seller != null)
            {
                Seller s = await SellerService.GetSeller(Seller);
                foreach (Product p in (List<Product>)s.Products)
                {
                    Product p1 = await ProductService.GetProduct(p.ProductId);
                    Products.Add(p1);
                    Quantities.Add(0);
                }
            }
            else
            {
                Mensagem = "O utilizador não existe";
            }
            StateHasChanged();
        }
    }


    public async Task ParticipateInMarket()
    {
        Mensagem = null;
        if (Seller != null)
        {
            try
            {
                await SellerService.RegisterSellerInMarket(Seller, MarketId, Photo, Products.Select(x => x.ProductId).ToList(), Quantities);
                Mensagem = "Inscrito com sucesso"; //sucesium
            }
            catch (Exception)
            {
                Mensagem = "Não o foi possivel inscrever";
            }
        }
        else
        {
            Mensagem = " O utilizador não existe";
        }
    }




}